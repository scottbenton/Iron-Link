create type "public"."world_player_role" as enum ('owner', 'guide', 'player');

drop policy "User can delete their own character" on "public"."characters";

create table "public"."world_players" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "world_id" uuid,
    "created_at" timestamp with time zone not null default now(),
    "role" world_player_role not null
);


alter table "public"."world_players" enable row level security;

create table "public"."worlds" (
    "id" uuid not null default gen_random_uuid(),
    "name" text,
    "rulesets" jsonb not null default '{}'::jsonb,
    "expansions" jsonb not null default '{}'::jsonb,
    "playset" jsonb not null default '{}'::jsonb,
    "created_at" timestamp with time zone not null default now(),
    "truths" jsonb not null default '{}'::jsonb
);


alter table "public"."worlds" enable row level security;

alter table "public"."games" add column "world_id" uuid;

CREATE UNIQUE INDEX "Worlds_pkey" ON public.worlds USING btree (id);

CREATE UNIQUE INDEX world_players_pkey ON public.world_players USING btree (id);

alter table "public"."world_players" add constraint "world_players_pkey" PRIMARY KEY using index "world_players_pkey";

alter table "public"."worlds" add constraint "Worlds_pkey" PRIMARY KEY using index "Worlds_pkey";

alter table "public"."games" add constraint "games_world_id_fkey" FOREIGN KEY (world_id) REFERENCES worlds(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."games" validate constraint "games_world_id_fkey";

alter table "public"."world_players" add constraint "world_players_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."world_players" validate constraint "world_players_user_id_fkey";

alter table "public"."world_players" add constraint "world_players_world_id_fkey" FOREIGN KEY (world_id) REFERENCES worlds(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."world_players" validate constraint "world_players_world_id_fkey";

grant delete on table "public"."world_players" to "anon";

grant insert on table "public"."world_players" to "anon";

grant references on table "public"."world_players" to "anon";

grant select on table "public"."world_players" to "anon";

grant trigger on table "public"."world_players" to "anon";

grant truncate on table "public"."world_players" to "anon";

grant update on table "public"."world_players" to "anon";

grant delete on table "public"."world_players" to "authenticated";

grant insert on table "public"."world_players" to "authenticated";

grant references on table "public"."world_players" to "authenticated";

grant select on table "public"."world_players" to "authenticated";

grant trigger on table "public"."world_players" to "authenticated";

grant truncate on table "public"."world_players" to "authenticated";

grant update on table "public"."world_players" to "authenticated";

grant delete on table "public"."world_players" to "service_role";

grant insert on table "public"."world_players" to "service_role";

grant references on table "public"."world_players" to "service_role";

grant select on table "public"."world_players" to "service_role";

grant trigger on table "public"."world_players" to "service_role";

grant truncate on table "public"."world_players" to "service_role";

grant update on table "public"."world_players" to "service_role";

grant delete on table "public"."worlds" to "anon";

grant insert on table "public"."worlds" to "anon";

grant references on table "public"."worlds" to "anon";

grant select on table "public"."worlds" to "anon";

grant trigger on table "public"."worlds" to "anon";

grant truncate on table "public"."worlds" to "anon";

grant update on table "public"."worlds" to "anon";

grant delete on table "public"."worlds" to "authenticated";

grant insert on table "public"."worlds" to "authenticated";

grant references on table "public"."worlds" to "authenticated";

grant select on table "public"."worlds" to "authenticated";

grant trigger on table "public"."worlds" to "authenticated";

grant truncate on table "public"."worlds" to "authenticated";

grant update on table "public"."worlds" to "authenticated";

grant delete on table "public"."worlds" to "service_role";

grant insert on table "public"."worlds" to "service_role";

grant references on table "public"."worlds" to "service_role";

grant select on table "public"."worlds" to "service_role";

grant trigger on table "public"."worlds" to "service_role";

grant truncate on table "public"."worlds" to "service_role";

grant update on table "public"."worlds" to "service_role";

create policy "User or guides can delete their own character"
on "public"."characters"
as permissive
for delete
to authenticated
using (((( SELECT auth.uid() AS uid) = uid) OR (( SELECT auth.uid() AS uid) IN ( SELECT game_players.user_id
   FROM game_players
  WHERE ((game_players.game_id = characters.game_id) AND (game_players.role = 'guide'::player_role))))));

alter publication supabase_realtime add table worlds;
alter publication supabase_realtime add table world_players;

alter table worlds replica identity full;
alter table world_players replica identity full;